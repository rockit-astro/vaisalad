#!/usr/bin/env python3
#
# This file is part of vaisalad.
#
# vaisalad is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# vaisalad is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with vaisalad.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for querying the latest measurement from vaisalad"""

import datetime
import json
import os
import sys
import time
import Pyro4
import warwick.observatory as observatory

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

FMT_RED = u'\033[91m'
FMT_BOLD = u'\033[1m'
FMT_CLEAR = u'\033[0m'

def print_status():
    """Prints the latest weather data in human-readable form"""
    latest = None
    try:
        with observatory.daemons.onemetre_vaisala.connect() as vaisala:
            latest = vaisala.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the Vaisala daemon')
        return 1

    if latest is not None:
        date = datetime.datetime.strptime(latest['date'], '%Y-%m-%dT%H:%M:%SZ')
        print('Data received ' + FMT_BOLD + str(date) + FMT_CLEAR)
        print('Wind Direction: ' + format_value(latest['wind_direction'],
                                                latest['wind_direction_valid'], '\u00B0'))
        print('    Wind Speed: ' + format_value(latest['wind_speed'],
                                                latest['wind_speed_valid'], ' km/h'))
        print('   Temperature: ' + format_value(latest['temperature'],
                                                latest['temperature_valid'], '\u00B0C'))
        print(' Rel. Humidity: ' + format_value(latest['relative_humidity'],
                                                latest['relative_humidity_valid'], ' %RH'))
        print('Temp. > DewPt.: ' + format_value(latest['dew_point_delta'],
                                                latest['dew_point_delta_valid'], '\u00B0C'))
        print('      Pressure: ' + format_value(latest['pressure'],
                                                latest['pressure_valid'], ' hPa'))
        print('Rain Intensity: ' + format_value(latest['rain_intensity'],
                                                latest['rain_intensity_valid'], ' mm/h'))
        print('   Accum. Rain: ' + format_value(latest['accumulated_rain'],
                                                latest['accumulated_rain_valid'], ' mm'))
        print()
    else:
        print('error: no data available')
        return 1

    return 0

def format_value(data, valid, suffix=''):
    """Builds a formatted string with a value"""
    ret = FMT_BOLD + str(data) + suffix
    if not valid:
        ret += FMT_RED + ' (INVALID)'
    ret += FMT_CLEAR
    return ret

def print_json():
    """Prints the latest environment data in machine-readable form"""
    latest = None
    try:
        with observatory.daemons.onemetre_vaisala.connect() as vaisala:
            latest = vaisala.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the Vaisala daemon')
        return 1

    print(json.dumps(latest))

    return 0

def reset_rain_counter():
    """Resets the accumulated rain counter"""
    try:
        with observatory.daemons.onemetre_vaisala.connect() as vaisala:
            # The reset occasionally fails first time, so try running it twice with a short delay
            vaisala.reset_rain_counter()
            time.sleep(1)
            vaisala.reset_rain_counter()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the Vaisala daemon')
        return 1
    return 0

def print_usage(name):
    """Prints the utility help"""
    print('Usage: {} <command>'.format(name))
    print()
    print('   status      print a human-readable summary of the Vaisala status')
    print('   json        print a machine-readable summary of the Vaisala status')
    print('   zerorain    reset the accumulated rain counter')
    print()

    return 1

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit(print_usage(SCRIPT_NAME))

    if sys.argv[1] == 'status':
        sys.exit(print_status())
    elif sys.argv[1] == 'json':
        sys.exit(print_json())
    elif sys.argv[1] == 'zerorain':
        sys.exit(reset_rain_counter())

    # Command not found
    sys.exit(print_usage(SCRIPT_NAME))

