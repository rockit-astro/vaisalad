#!/usr/bin/env python3
#
# This file is part of vaisalad.
#
# vaisalad is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# vaisalad is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with vaisalad.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for querying the latest measurement from vaisalad"""

import datetime
import json
import os
import sys
import Pyro4

PYRO_HOST = '192.168.0.102'
PYRO_PORT = 9001
PYRO_NAME = 'vaisala_daemon'
PYRO_COMM_TIMEOUT = 5

SCRIPT_NAME = os.path.basename(sys.argv[0])

def print_status():
    """Prints the latest weather data in human-readable form"""
    latest = None
    try:
        with Pyro4.Proxy('PYRO:' + PYRO_NAME + '@' + PYRO_HOST + ':' + str(PYRO_PORT)) as vaisala:
            latest = vaisala.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the Vaisala daemon')
        return 1

    if latest is not None:
        date = datetime.datetime.strptime(latest['date'], '%Y-%m-%dT%H:%M:%SZ')
        print('Data received \033[1m{}\033[0m:'.format(date))
        print(u'Wind Direction: \033[1m{} \u00B0\033[0m'.format(latest['wind_direction']))
        print(u'    Wind Speed: \033[1m{} km/h\033[0m'.format(latest['wind_speed']))
        print(u'   Temperature: \033[1m{} \u2103\033[0m'.format(latest['temperature']))
        print(u' Rel. Humidity: \033[1m{} %RH\033[0m'.format(latest['relative_humidity']))
        print(u'      Pressure: \033[1m{} hPa\033[0m'.format(latest['pressure']))
        print(u'   Accum. Rain: \033[1m{} mm\033[0m'.format(latest['accumulated_rain']))
        print()
    else:
        print('error: no data available')
        return 1

    return 0

def print_json():
    """Prints the latest environment data in machine-readable form"""
    latest = None
    try:
        with Pyro4.Proxy('PYRO:' + PYRO_NAME + '@' + PYRO_HOST + ':' + str(PYRO_PORT)) as vaisala:
            latest = vaisala.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the Vaisala daemon')
        return 1

    print(json.dumps(latest))

    return 0

def print_usage(name):
    """Prints the utility help"""
    print('Usage: {} <command>'.format(name))
    print()
    print('   status      print a human-readable summary of the Vaisala status')
    print('   json        print a machine-readable summary of the Vaisala status')
    print()

    return 1

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit(print_usage(SCRIPT_NAME))

    Pyro4.config.COMMTIMEOUT = PYRO_COMM_TIMEOUT
    if sys.argv[1] == 'status':
        sys.exit(print_status())
    elif sys.argv[1] == 'json':
        sys.exit(print_json())

    # Command not found
    sys.exit(print_usage(SCRIPT_NAME))

