#!/usr/bin/env python3
#
# This file is part of vaisalad.
#
# vaisalad is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# vaisalad is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with vaisalad.  If not, see <http://www.gnu.org/licenses/>.

"""Simulates an attached weather station by replaying data from a csv file"""

import datetime
import sys
import threading
import time
import numpy
import Pyro4

# Set automatically when generating RPM package
SOFTWARE_VERSION = 'UNKNOWN'

PYRO_HOST = 'localhost'
PYRO_PORT = 9001
PYRO_NAME = 'vaisala_daemon'

DATA_FIELDS = [
    # Special case: skip row if false
    ('valid', bool),
    # Regular data
    ('wind_direction', float),
    ('wind_direction_valid', bool),
    ('wind_speed', float),
    ('wind_speed_valid', bool),
    ('temperature', float),
    ('temperature_valid', bool),
    ('relative_humidity', float),
    ('relative_humidity_valid', bool),
    ('pressure', float),
    ('pressure_valid', bool),
    ('accumulated_rain', float),
    ('accumulated_rain_valid', bool)
]

class SimulatedVaisalaDaemon:
    """Daemon class that simulates the behaviour of vaisalad"""
    def __init__(self, data_file, update_delay):
        self._lock = threading.Lock()
        self._running = True
        self._last_error = datetime.datetime.min
        self._latest = None
        self._send_rain_reset = False
        self._rain_baseline = 0
        self._update_delay = update_delay
        self._data_row = 0

        self._data = numpy.genfromtxt(data_file, dtype=DATA_FIELDS, delimiter=',', comments="#")

        runloop = threading.Thread(target=self.run)
        runloop.daemon = True
        runloop.start()

    def run(self):
        """Main run loop"""
        while self._running:
            # Main run loop
            while self._running:
                rain = self._data[self._data_row]['accumulated_rain']
                if self._send_rain_reset:
                    self._rain_baseline = rain
                    self._send_rain_reset = False

                time.sleep(self._update_delay)
                if self._data[self._data_row]['valid']:
                    latest = {
                        'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                        'software_version': SOFTWARE_VERSION
                    }

                    for k,v in DATA_FIELDS[1:]:
                        latest.update({
                            k: (v)(self._data[self._data_row][k]),
                        })

                    latest.update({'accumulated_rain': rain - self._rain_baseline})

                    with self._lock:
                        self._latest = latest

                self._data_row += 1
                if self._data_row == len(self._data):
                    self._data_row = 0
                    self._rain_baseline = 0

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement."""
        with self._lock:
            return self._latest

    @Pyro4.expose
    def reset_rain_counter(self):
        """Reset the accumulated rain counter"""
        self._send_rain_reset = True

def spawn_daemon():
    """Spawns the daemon and registers it with Pyro"""
    Pyro4.config.COMMTIMEOUT = 5
    Pyro4.config.REQUIRE_EXPOSE = True

    if len(sys.argv) != 3:
        sys.exit('vaisalad-sim <replay data> <sampling period>')

    pyro = Pyro4.Daemon(host=PYRO_HOST, port=PYRO_PORT)
    vaisala = SimulatedVaisalaDaemon(sys.argv[1], float(sys.argv[2]))
    uri = pyro.register(vaisala, objectId=PYRO_NAME)

    print('Starting simulated vaisala daemon with Pyro ID:', uri)
    pyro.requestLoop()
    print('Stopping simulated vaisala daemon with Pyro ID:', uri)

if __name__ == '__main__':
    spawn_daemon()
