#!/usr/bin/env python3
#
# This file is part of vaisalad.
#
# vaisalad is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# vaisalad is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with vaisalad.  If not, see <http://www.gnu.org/licenses/>.

"""Weather station daemon"""

import argparse
import datetime
import math
import re
import socket
import threading
import time
import Pyro4
import serial
from warwick.observatory.common import log
from warwick.observatory.common.helpers import pyro_client_matches
from warwick.observatory.vaisala import Config

# Set automatically when generating RPM package
SOFTWARE_VERSION = "UNKNOWN"

DATA_REGEX = r'0R0,' \
    r'Dm=(?P<wind_direction>\d+)(?P<wind_direction_status>[D\#]),' \
    r'Sn=(?P<wind_lull>\d+\.\d)(?P<wind_lull_status>[K\#]),' \
    r'Sm=(?P<wind_speed>\d+\.\d)(?P<wind_speed_status>[K\#]),' \
    r'Sx=(?P<wind_gust>\d+\.\d)(?P<wind_gust_status>[K\#]),' \
    r'Ta=(?P<temperature>-?\d+\.\d)(?P<temperature_status>[C\#]),' \
    r'Ua=(?P<relative_humidity>\d+\.\d)(?P<relative_humidity_status>[P\#]),' \
    r'Pa=(?P<pressure>\d+\.\d)(?P<pressure_status>[H\#]),' \
    r'Rc=(?P<accumulated_rain>\d+\.\d\d)(?P<accumulated_rain_status>[M\#]),' \
    r'Ri=(?P<rain_intensity>\d+\.\d)(?P<rain_intensity_status>[M\#]),' \
    r'Th=(?P<heater_temperature>-?\d+\.\d)(?P<heater_temperature_status>[C\#]),' \
    r'Vh=(?P<heater_voltage>\d+\.\d)(?P<heater_voltage_status>[NVWF])\r\n'

DATA_FIELDS = {
    'wind_direction': 'D',
    'wind_lull': 'K',
    'wind_speed': 'K',
    'wind_gust': 'K',
    'temperature': 'C',
    'relative_humidity': 'P',
    'pressure': 'H',
    'accumulated_rain': 'M',
    'rain_intensity': 'M'
}

DATA_SENSORS = {
    'wind_gust': {
        'label': 'Wind Gust',
        'units': 'km/h'
    },
    'wind_lull': {
        'label': 'Wind Lull',
        'units': 'km/h'
    },
    'wind_speed': {
        'label': 'Wind Avg',
        'units': 'km/h'
    },
    'wind_direction': {
        'label': 'Wind Direction',
        'units': '\u00B0'
    },
    'temperature': {
        'label': 'Temperature',
        'units': '\u00B0C'
    },
    'relative_humidity': {
        'label': 'Rel. Humidity',
        'units': '%RH'
    },
    'dew_point_delta': {
        'label': 'Temp. > DewPt.',
        'units': '\u00B0C'
    },
    'pressure': {
        'label': 'Pressure',
        'units': 'hPa'
    },
    'rain_intensity': {
        'label': 'Rain Intensity',
        'units': 'mm/h'
    },
    'accumulated_rain': {
        'label': 'Accum. Rain',
        'units': 'mm'
    }
}


def dew_point(temperature, humidity):
    """Calculates the dew point using the equation defined by the Vaisala manual"""
    a = math.log(100 / humidity)
    b = 15 * a - 2.1 * temperature + 2711.5
    c = temperature + 273.16
    return c * b / (c * a / 2 + b) - 273.16


class VaisalaDaemon:
    """Daemon class that wraps the RS232/socket interface"""
    def __init__(self, config):
        self._config = config
        self._lock = threading.Lock()
        self._regex = re.compile(DATA_REGEX)
        self._latest = None

        self._send_reset_rain = False
        self._last_reset_rain_check = datetime.datetime.min
        self._reset_rain_time = datetime.time.fromisoformat(self._config.reset_rain_time)

        threading.Thread(target=self.run, daemon=True).start()

    def run(self):
        """Main run loop"""
        port_error = False
        sock = None
        while True:
            # Initial setup
            try:
                if self._config.socket_ip:
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.connect((self._config.socket_ip, self._config.socket_port))
                    sock.settimeout(self._config.socket_timeout)
                    port = sock.makefile(mode='rwb', buffering=0)
                    print(f'Connected to {self._config.socket_ip}:{self._config.socket_port}')
                else:
                    port = serial.Serial(self._config.serial_port, self._config.serial_baud,
                                         timeout=self._config.serial_timeout)
                    print('Connected to', self._config.serial_port)

                prefix = 'Restored' if port_error else 'Established'
                log.info(self._config.log_name, prefix + ' connection to vaisala')
                port_error = False
            except Exception as exception:
                if not port_error:
                    print(exception)
                    print('Will retry in 10 seconds...')
                    log.error(self._config.log_name, 'Failed to connect to vaisala')

                port_error = True

                time.sleep(10.)
                continue

            try:
                self._latest = None

                # First line may have been only partially received
                port.readline()

                # Main run loop
                while True:
                    now = datetime.datetime.utcnow()
                    reset_time = datetime.datetime.combine(now.date(), self._reset_rain_time)
                    if self._last_reset_rain_check < reset_time <= now:
                        self._send_reset_rain = True

                    self._last_reset_rain_check = now
                    if self._send_reset_rain:
                        port.write('\r\n0XZRU\r\n'.encode('ascii'))
                        self._send_reset_rain = False

                    data = port.readline().decode('ascii')
                    match = self._regex.match(data)
                    if match:
                        latest = {
                            'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                            'software_version': SOFTWARE_VERSION
                        }

                        for field, status in DATA_FIELDS.items():
                            latest.update({
                                field: float(match.group(field)),
                                field + '_valid': match.group(field + '_status') == status
                            })

                        dewpt = dew_point(latest['temperature'], latest['relative_humidity'])
                        latest.update({
                            'dew_point_delta': round(latest['temperature'] - dewpt, 2),
                            'dew_point_delta_valid': latest['temperature_valid'] and latest['relative_humidity_valid']
                        })

                        with self._lock:
                            self._latest = latest
            except Exception as exception:
                if sock:
                    sock.close()
                    sock = None

                port.close()
                if not port_error:
                    print(exception)
                    print('Will retry in 10 seconds...')
                    log.error(self._config.log_name, 'Lost connection to vaisala')
                port_error = True
                time.sleep(10.)

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement."""
        with self._lock:
            return self._latest

    @Pyro4.expose
    def measurement_sensors(self):
        """
        Returns a dictionary of sensor definitions
        """
        return DATA_SENSORS

    @Pyro4.expose
    def reset_rain_counter(self):
        """Reset the accumulated rain counter"""
        if not pyro_client_matches(self._config.control_machines):
            return False

        self._send_reset_rain = True
        return True


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Vaisala Server')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()

    _config = Config(args.config)
    _config.daemon.launch(VaisalaDaemon(_config))
